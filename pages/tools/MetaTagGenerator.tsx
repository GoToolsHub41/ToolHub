import React, { useState, useMemo } from 'react';
import useCopyToClipboard from '../../hooks/useCopyToClipboard';

export const MetaTagGenerator: React.FC = () => {
  const [formData, setFormData] = useState({
    title: 'Awesome Website Title',
    description: 'A concise and informative description of the page content.',
    keywords: 'keyword1, keyword2, keyword3',
    author: 'Your Name',
    viewport: 'width=device-width, initial-scale=1.0',
    charset: 'UTF-8',
    robots: 'index, follow'
  });
  const [isCopied, copy] = useCopyToClipboard();

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const generatedTags = useMemo(() => {
    return `<!-- Generated by ToolGalaxyHub -->
<meta charset="${formData.charset}">
<meta name="viewport" content="${formData.viewport}">
<title>${formData.title}</title>
<meta name="description" content="${formData.description}">
<meta name="keywords" content="${formData.keywords}">
<meta name="author" content="${formData.author}">
<meta name="robots" content="${formData.robots}">
<!-- Open Graph / Facebook -->
<meta property="og:type" content="website">
<meta property="og:title" content="${formData.title}">
<meta property="og:description" content="${formData.description}">
<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image">
<meta property="twitter:title" content="${formData.title}">
<meta property="twitter:description" content="${formData.description}">`;
  }, [formData]);

  const InputField: React.FC<{ name: string; label: string; value: string; }> = ({ name, label, value }) => (
    <div>
        <label htmlFor={name} className="block text-sm font-medium text-gray-300 mb-1">{label}</label>
        <input type="text" id={name} name={name} value={value} onChange={handleChange} className="w-full p-2 bg-gray-900 border border-gray-700 rounded-md focus:ring-2 focus:ring-accent focus:outline-none transition" />
    </div>
  );

  return (
    <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
      <div className="space-y-4">
        <h3 className="text-xl font-semibold text-cyan-300">Meta Tag Options</h3>
        <InputField name="title" label="Title" value={formData.title} />
        <InputField name="description" label="Description" value={formData.description} />
        <InputField name="keywords" label="Keywords (comma-separated)" value={formData.keywords} />
        <InputField name="author" label="Author" value={formData.author} />
        <div>
           <label htmlFor="robots" className="block text-sm font-medium text-gray-300 mb-1">Robots</label>
           <select id="robots" name="robots" value={formData.robots} onChange={handleChange} className="w-full p-2 bg-gray-900 border border-gray-700 rounded-md focus:ring-2 focus:ring-accent focus:outline-none transition">
                <option>index, follow</option>
                <option>noindex, nofollow</option>
                <option>index, nofollow</option>
                <option>noindex, follow</option>
           </select>
        </div>
      </div>
      <div className="space-y-4">
        <div className="flex justify-between items-center">
            <h3 className="text-xl font-semibold text-cyan-300">Generated Tags</h3>
            <button onClick={() => copy(generatedTags)} className="px-4 py-2 bg-accent hover:bg-cyan-700 rounded-md text-white transition-colors font-semibold">
                {isCopied ? 'Copied!' : 'Copy Tags'}
            </button>
        </div>
        <pre className="w-full h-full p-4 bg-gray-900 border border-gray-700 rounded-md whitespace-pre-wrap text-sm overflow-auto">
          <code>{generatedTags}</code>
        </pre>
      </div>
    </div>
  );
};
